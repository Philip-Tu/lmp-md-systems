# LAMMPS input script for Green-Kubo dumbbell simulation

variable    slurmid getenv SLURM_JOB_ID
shell       mkdir restart
shell       mkdir out/${slurmid}
log         out/${slurmid}/loginit.out
variable    restart index 0
variable	seed equal 12345									# seed for randomization

# settings
# variable    Nactive equal 150  									# Number of active dumbbells
# variable 	rhopassive equal 0.0075								# Density of passive colloidal particles
variable	Npassive equal 5
variable	rhoactive equal 0.08
variable f_active equal 8
variable    gamma equal 2     									# Langevin drag on dumbbells
variable    gammainv internal 0.5
variable    T equal 1.0       									# Langevin temperature
variable    L equal 10        									# Simulation box length (originally 20)
variable    W equal 10        									# Simulation box width  (originally 20)
variable    rcut equal "2^(1/6)"								# r at minimum LJ potential
variable	dpassive equal 10									# colloidal particle diameter	
variable	dactive equal 1										# active dumbbell particle diameter
variable	dpassac equal (${dpassive}/2)+(${dactive}/2)		# total hard-sphere diameter for a passive particle in contact with an active one
variable	rcutpassive equal ${dpassive}*${rcut}				# LJ cutoff for two passive colloidal particles
variable	rcutactive equal ${dactive}*${rcut}					# LJ cutoff for two active dumbbell particles
variable	rcutpassac	equal ${dpassac}*${rcut}				# LJ cutoff for passive and active pair
variable	activemass	equal 1.0								# mass of atoms making up active dumbbells
variable	colmass equal ${activemass}*${dpassive}^2			# mass of individual colloid particles
variable    dt equal 0.005     # Timestep

# variable    s equal 1         # Nevery
# variable    p equal 2000      # Nrepeat
# variable    d equal 10000000  # Nfreq

# problem setup
units       lj
dimension   2
atom_style  bond
neigh_modify    delay 0 every 1
bond_style      harmonic
newton          on off
comm_modify     vel yes cutoff 30


# Make dumbbells:
# lattice         sq ${rhopassive}  # Set the lattice density for dumbbells.
lattice			sq ${rhoactive}
region          simbox block 0 $L 0 $W -0.1 0.1
# region          halfleft  block 0 ${cut} 0 $W -0.1 0.1
# region          halfright block ${cut} $L 0 $W -0.1 0.1
create_box      2 simbox &
                bond/types 1 &
                extra/bond/per/atom 1
molecule        dumbbell mymol.txt
# create_atoms    1 box															# Create passive particles on lattice sites
# create_atoms    1 random ${Nactive} ${seed} NULL mol dumbbell ${seed}			# Create dumbbells by random placement
create_atoms	1 random ${Npassive} ${seed} NULL
create_atoms    1 box mol dumbbell ${seed}
group           passive type 1
group           active type 2
variable		ctA equal count(active)/2			# number of active dumbbells
variable		ctP equal count(passive)
variable        rhoA equal ${ctA}/(lx*ly)	# The actual density of active particles (approx 2x target, count atoms)
variable        rhoP equal ${ctP}/(lx*ly)	# The actual density of passive particles (approx target)

# Write out the simulation parameters for post-processing:
variable        ly equal ly
variable        lx equal lx
print           '{'                                 file   data/params.json
print           '   "lx": ${lx},'                   append data/params.json
print           '   "ly": ${ly},'                   append data/params.json
# print           '   "rho": ${rho},'                 append data/params.json
print           '   "rhoA": ${rhoA},'               append data/params.json
print           '   "rhoP": ${rhoP},'               append data/params.json
print           '   "f_active": ${f_active},'       append data/params.json
print           '   "rcut": ${rcut},'               append data/params.json
print           '   "dt": ${dt},'                   append data/params.json
print           '   "ctA": ${ctA},'                 append data/params.json
print           '   "ctP": ${ctP},'                 append data/params.json
print           '}'                                 append data/params.json

# Define interactions
pair_style      lj/cut ${rcut}
pair_coeff      1 1 1 ${dpassive} ${rcutpassive}
pair_coeff		2 2 1 ${dactive} ${rcutactive}
pair_coeff		1 2 1 ${dpassac} ${rcutpassac}
pair_modify     shift yes
bond_style      harmonic                # E = k*(r-r0)^2
bond_coeff      1  100  1             	# First parameter is k, second is r0
mass            1 ${colmass}
mass			2 ${activemass}

# Define fixes that affect dynamics
### Integrate passive particles with NVE, active with Langevin:
fix             1 all nve
fix             3 active langevin $T $T ${gammainv} ${seed}
fix             2 active dumbbell ${f_active} convect # Add active driving force
fix             2d all enforce2d


# Equilibration run
minimize		0.0 1.0e-8 1000 100000
write_dump      all xyz out/${slurmid}/init.xyz
dump 			trajeq all xyz 10 out/${slurmid}/trajeq.xyz  # check extent of equilibration
velocity        all create $T ${seed}
# compute         myTempEQ passive temp
# fix  			tempControlEQ all controller 100 1 0.01 0 0 c_myTempEQ $T gammainv
# fix  			compute_temp passive ave/time 100 1 100 c_myTempEQ mode scalar ave running file passive_temp.temp
thermo          1000
thermo_style    custom step temp press cpu spcpu
timestep        0.005
run             40000 #0

# Production run: compute stress correlator using running avg
label           production_run
log             out/${slurmid}/log.out
timestep        ${dt}

# dump            traj all xyz 10 out/${slurmid}/traj.xyz
# dump            traja active xyz 10 out/${slurmid}/trajactive.xyz
# dump            trajp passive xyz 10 out/${slurmid}/trajpassive.xyz
compute 		myRDF passive rdf 100 cutoff 29
fix 			compute_rdf passive ave/time 10 1 10 c_myRDF[*] mode vector ave running file data/cumul_rdf.rdf overwrite
compute         myTemp passive temp
fix  			compute_temp passive ave/time 10 1 10 c_myTemp mode scalar ave running file data/passive_temp.temp overwrite
dump 			posforce passive custom 10 data/pos_forces.out x y fx fy			# output the positions of and forces on passive particles
thermo_style    custom step temp press cpu spcpu # v_pxx v_lambda2 v_lambda4  # odd and shear viscosity
thermo          1000
run             8000 #16000000
write_dump      all xyz out/${slurmid}/final.xyz
